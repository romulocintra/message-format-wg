message = pattern / complex-message

complex-message = "{{" [s] *(declaration [s]) body [s] "}}"

declaration = input-declaration / local-declaration
input-declaration = input [s] variable-expression
local-declaration = local s variable [s] "=" [s] expression

body = quoted-pattern
     / (selectors 1*([s] variant))

quoted-pattern = "{{" pattern "}}"
pattern = *(text / expression)
selectors = match 1*([s] expression)
variant = when 1*(s key) [s] quoted-pattern
key = literal / "*"

expression = literal-expression / variable-expression / function-expression
literal-expression = "{" [s] literal [s annotation] [s] "}"
variable-expression = "{" [s] variable [s annotation] [s] "}"
function-expression = "{" [s] annotation [s] "}"
annotation = (function *(s option)) / reserved / private-use

literal = quoted / unquoted
variable = "$" name
function = (":" / "+" / "-") identifier
option = identifier [s] "=" [s] (literal / variable)

; reserved keywords are always lowercase
input = %s"input"
local = %s"local"
match = %s"match"
when  = %s"when"

text = 1*(text-char / text-escape)
text-char = %x0-5B         ; omit \
          / %x5D-7A        ; omit {
          / %x7C           ; omit }
          / %x7E-D7FF      ; omit surrogates
          / %xE000-10FFFF

quoted      = "|" *(quoted-char / quoted-escape) "|"
quoted-char = %x0-5B         ; omit \
            / %x5D-7B        ; omit |
            / %x7D-D7FF      ; omit surrogates
            / %xE000-10FFFF

unquoted       = unquoted-start *(name-char / ":")
unquoted-start = name-start / DIGIT / "."
               / %xB7 / %x300-36F / %x203F-2040

; reserve sigils for private-use by implementations
private-use    = private-start reserved-body
private-start  = "^" / "&"

; reserve additional sigils for use by 
; future versions of this specification
reserved       = reserved-start reserved-body
reserved-start = "!" / "@" / "#" / "%" / "*" / "<" / ">" / "/" / "?" / "~"
reserved-body  = *( [s] 1*(reserved-char / reserved-escape / quoted))

reserved-char  = %x00-08        ; omit HTAB and LF
               / %x0B-0C        ; omit CR
               / %x0E-19        ; omit SP
               / %x21-5B        ; omit \
               / %x5D-7A        ; omit { | }
               / %x7E-D7FF      ; omit surrogates
               / %xE000-10FFFF

; identifier matches https://www.w3.org/TR/REC-xml-names/#NT-QName
; name matches https://www.w3.org/TR/REC-xml-names/#NT-NCName
identifier = [namespace ":"] name
namespace  = name
name       = name-start *name-char
name-start = ALPHA / "_"
           / %xC0-D6 / %xD8-F6 / %xF8-2FF
           / %x370-37D / %x37F-1FFF / %x200C-200D
           / %x2070-218F / %x2C00-2FEF / %x3001-D7FF
           / %xF900-FDCF / %xFDF0-FFFD / %x10000-EFFFF
name-char  = name-start / DIGIT / "-" / "."
           / %xB7 / %x300-36F / %x203F-2040

text-escape     = backslash ( backslash / "{" / "}" )
quoted-escape   = backslash ( backslash / "|" )
reserved-escape = backslash ( backslash / "{" / "|" / "}" )
backslash       = %x5C ; U+005C REVERSE SOLIDUS "\"

s = 1*( SP / HTAB / CR / LF )
