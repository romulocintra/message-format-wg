message = simple-message / complex-message

simple-message = [simple-start pattern]
simple-start = simple-start-char / text-escape / placeholder
pattern = *(text-char / text-escape / placeholder)
placeholder = expression / markup

complex-message = *(declaration [s]) complex-body
declaration = input-declaration / local-declaration / reserved-statement
input-declaration = input [s] variable-expression
local-declaration = local s variable [s] "=" [s] expression

complex-body = quoted-pattern / matcher
quoted-pattern = "{{" pattern "}}"

matcher = match-statement 1*([s] variant)
match-statement = match 1*([s] selector)
selector = expression
variant = key *(s key) [s] quoted-pattern
key = literal / "*"

expression = literal-expression
           / variable-expression
           / annotation-expression
literal-expression = "{" [s] literal [s annotation] *(s attribute) [s] "}"
variable-expression = "{" [s] variable [s annotation] *(s attribute) [s] "}"
annotation-expression = "{" [s] annotation *(s attribute) [s] "}"
annotation = function
           / private-use-annotation
           / reserved-annotation

markup       = "{" [s] markup-open *(s attribute) [s] ["/"] "}"
             / "{" [s] markup-close *(s attribute) [s] "}"
markup-open  = "#" identifier *(s option)
markup-close = "/" identifier

literal = quoted / unquoted
variable = "$" name
function = ":" identifier *(s option)
option = identifier [s] "=" [s] (literal / variable)
attribute = "@" identifier [[s] "=" [s] (literal / variable)]

input = %s".input"
local = %s".local"
match = %s".match"

simple-start-char = %x0-2D         ; omit .
                  / %x2F-5B        ; omit \
                  / %x5D-7A        ; omit {
                  / %x7C           ; omit }
                  / %x7E-D7FF      ; omit surrogates
                  / %xE000-10FFFF
text-char = simple-start-char / "."

quoted      = "|" *(quoted-char / quoted-escape) "|"
quoted-char = %x0-5B         ; omit \
            / %x5D-7B        ; omit |
            / %x7D-D7FF      ; omit surrogates
            / %xE000-10FFFF

unquoted       = name
               / number-literal
; number-literal matches JSON number
; https://www.rfc-editor.org/rfc/rfc8259#section-6
number-literal = ["-"] (0 / ([1-9] *DIGIT)) ["." 1*DIGIT] [%i"e" ["-" / "+"] 1*DIGIT]

; Reserve additional .keywords for use by future versions of this specification.
reserved-statement = reserved-keyword [s reserved-body] 1*([s] expression)
; Note that the following expression is a simplification,
; as this rule MUST NOT be considered to match existing keywords
; (`.input`, `.local`, and `.match`).
reserved-keyword = "." name

; Reserve additional sigils for use by future versions of this specification.
reserved-annotation = reserved-annotation-start reserved-body
reserved-annotation-start = "!" / "%" / "*" / "+" / "<" / ">" / "?" / "~"

reserved-body  = *([s] 1*(reserved-char / reserved-escape / quoted))
reserved-char  = %x00-08        ; omit HTAB and LF
               / %x0B-0C        ; omit CR
               / %x0E-19        ; omit SP
               / %x21-3F        ; omit @
               / %x41-5B        ; omit \
               / %x5D-7A        ; omit { | }
               / %x7E-2FFF      ; omit IDEOGRAPHIC SPACE
               / %x3001-D7FF    ; omit surrogates
               / %xE000-10FFFF

; Reserve sigils for private-use by implementations.
private-use-annotation = private-start reserved-body
private-start = "^" / "&"

; identifier matches https://www.w3.org/TR/REC-xml-names/#NT-QName
; name matches https://www.w3.org/TR/REC-xml-names/#NT-NCName
identifier = [namespace ":"] name
namespace  = name
name       = name-start *name-char
name-start = ALPHA / "_"
           / %xC0-D6 / %xD8-F6 / %xF8-2FF
           / %x370-37D / %x37F-1FFF / %x200C-200D
           / %x2070-218F / %x2C00-2FEF / %x3001-D7FF
           / %xF900-FDCF / %xFDF0-FFFC / %x10000-EFFFF
name-char  = name-start / DIGIT / "-" / "."
           / %xB7 / %x300-36F / %x203F-2040

text-escape     = backslash ( backslash / "{" / "}" )
quoted-escape   = backslash ( backslash / "|" )
reserved-escape = backslash ( backslash / "{" / "|" / "}" )
backslash       = %x5C ; U+005C REVERSE SOLIDUS "\"

s = 1*( SP / HTAB / CR / LF / %x3000 )
